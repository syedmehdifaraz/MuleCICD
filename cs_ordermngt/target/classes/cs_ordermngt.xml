<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/current/mule-mongo.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <http:listener-config name="orderMngtListener" host="0.0.0.0" port="8083" doc:name="HTTP Listener Configuration"/>
    <mongo:config name="OrderMngt" username="suresh" database="ordermanagement" host="hscsrv164" doc:name="Mongo DB"/>
    <validation:config name="validateSiteName" doc:name="Validation Configuration"/>
    <validation:config name="validateLocationName" doc:name="Validation Configuration"/>
    <http:request-config name="LocalListener" host="localhost" port="8083" doc:name="HTTP Request Configuration"/>
    <flow name="placeorder(DONOTUSE)">
        <http:listener config-ref="orderMngtListener" path="/placeOrderOldFormat" allowedMethods="POST" doc:name="/orderOldFormat(DONOTUSE)"/>
        <object-to-string-transformer mimeType="application/json" doc:name="convert payload object to string" metadata:id="3e354cf4-7c38-46fa-90dc-fb0a64fc2116"/>
        <mongo:json-to-dbobject doc:name="transform payload to DBObject"/>
        <mongo:insert-object config-ref="OrderMngt" collection="orders" doc:name="Insert Order"/>
        <dw:transform-message doc:name="set success response" metadata:id="87312e73-87bc-45d9-9d5c-da5554b482ea">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "success",
	statusMessage: "Order Placed Successfully"
}]]></dw:set-payload>
        </dw:transform-message>
        <set-payload value="#[payload]" mimeType="application/json" doc:name="send success response"/>
        <catch-exception-strategy doc:name="exception handling">
            <dw:transform-message doc:name="set error response" metadata:id="c80cf11c-0476-4d63-a69c-a895c59d1779">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "error",
	statusMessage: "Exception occurred while processing order !!!"
}]]></dw:set-payload>
            </dw:transform-message>
            <set-payload value="#[payload]" doc:name="send error response"/>
        </catch-exception-strategy>
    </flow>
    <flow name="getorderSummary">
        <http:listener config-ref="orderMngtListener" path="/getOrders/{userName}" allowedMethods="GET" doc:name="/getOrders"/>
        <set-variable variableName="userName" value="#[message.inboundProperties.'http.uri.params'.userName]" doc:name="retrieve userName"/>
        <mongo:find-objects-using-query-map config-ref="OrderMngt" collection="orders" doc:name="Mongo DB">
            <mongo:query-attributes>
                <mongo:query-attribute key="userName">#[flowVars.userName]</mongo:query-attribute>
            </mongo:query-attributes>
        </mongo:find-objects-using-query-map>
        <mongo:mongo-collection-to-json doc:name="Mongo DB"/>
        <set-payload value="#[payload]" mimeType="application/json" doc:name="Set Payload"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <dw:transform-message doc:name="set error response" metadata:id="b7556c63-0c75-436e-beae-3bf20e31d37f">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "error",
	statusMessage: "Exception occurred while retrieving order !!"
}]]></dw:set-payload>
            </dw:transform-message>
            <set-payload value="#[payload]" doc:name="send error response"/>
        </catch-exception-strategy>
    </flow>
    <flow name="placeOrder">
        <http:listener config-ref="orderMngtListener" path="/order" allowedMethods="POST" doc:name="/placeOrder"/>
        <object-to-string-transformer mimeType="application/json" doc:name="Object to String" metadata:id="b7365b39-9de3-4d10-aab3-aa73d522b37d" />
        <dw:transform-message doc:name="Transform Message" metadata:id="f78798dc-4af4-4991-8c20-a27a1b06d5af">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-session-variable variableName="orderSummary"><![CDATA[%dw 1.0
%output application/json
---
{
	userName: payload.userName,
	orderQty: payload.orderQty,
	orderAmount: payload.orderAmount,
	orderLoyalpoints: payload.orderLoyalpoints,
	cateringCity: payload.cateringCity,
	cateringLocation: payload.cateringLocation,
	cateringSiteName: payload.cateringSiteName,
	createdDay: payload.createdDay,
	createdDate: payload.createdDate
}]]></dw:set-session-variable>
            <dw:set-session-variable variableName="orderItems"><![CDATA[%dw 1.0
%output application/json
---
payload.orderItems map ((orderItem , indexOfOrderItem) -> {
	itemName: orderItem.itemName,
	itemQty: orderItem.itemQty,
	itemPrice: orderItem.itemPrice,
	itemCategory: orderItem.itemCategory,
	itemLoyalpoints: orderItem.itemLoyalpoints
})]]></dw:set-session-variable>
        </dw:transform-message>
        <flow-ref name="generateOrderId" doc:name="generateOrderId"/>
        <flow-ref name="insertOrderSummary" doc:name="insertOrderSummary"/>
        <choice doc:name="Choice order summary status and proceed">
            <when expression="#[sessionVars.orderSummaryStatus == &quot;success&quot;]">
                <flow-ref name="insertOrderItems" doc:name="insertOrderItems"/>
                <choice doc:name="check orderDetails Insertion status and proceed">
                    <when expression="#[sessionVars.orderDetailStatus == &quot;success&quot;]">
                        <dw:transform-message doc:name="prepare success response" metadata:id="2ceb2b91-fe55-44b5-9ad7-c2b5e6e19f55">
                            <dw:input-session-variable mimeType="application/java" variableName="orderId"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "success",
	statusMessage: "Order Placed Successfully - "++ sessionVars.orderId as :string
}]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <otherwise>
                        <dw:transform-message doc:name="prepare failure response" metadata:id="6c39dd27-75d8-4827-a48d-064a65496a95">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "failure",
	statusMessage: "Order Not Placed Successfully"
}]]></dw:set-payload>
                        </dw:transform-message>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <dw:transform-message doc:name="prepare failure response" metadata:id="6ccc1dfe-9ed4-4c96-a0af-265a2da2f7d1">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "failure",
	statusMessage: "Order Not Placed Successfully !"
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Exception Handling">
            <flow-ref name="ExceptionHandling" doc:name="ExceptionHandling"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="generateOrderId">
        <mongo:count-objects-using-query-map config-ref="OrderMngt" collection="orderSummary" doc:name="Mongo DB"/>
        <choice doc:name="check for orderId value">
            <when expression="#[payload&gt;0]">
                <set-session-variable variableName="orderId" value="#[payload+1]" doc:name="map Actual OrderId"/>
            </when>
            <otherwise>
                <set-session-variable variableName="orderId" value="#[new java.util.Random().nextInt(10000)]" doc:name="map RandomId"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="insertOrderSummary">
        <dw:transform-message doc:name="Transform Message" metadata:id="bc2efa37-5468-4c9f-8f53-22c538497937">
            <dw:input-session-variable mimeType="application/java" variableName="orderId"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	userName: sessionVars.orderSummary.userName,
	orderId: sessionVars.orderId as :number,
	orderQty: sessionVars.orderSummary.orderQty as :number,
	orderAmount: sessionVars.orderSummary.orderAmount as :number,
	orderLoyalpoints: sessionVars.orderSummary.orderLoyalpoints as :number,
	cateringCity: sessionVars.orderSummary.cateringCity,
	cateringLocation: sessionVars.orderSummary.cateringLocation,
	cateringSiteName: sessionVars.orderSummary.cateringSiteName,
	createdDay: sessionVars.orderSummary.createdDay,
	createdDate: sessionVars.orderSummary.createdDate
}]]></dw:set-payload>
        </dw:transform-message>
        <ee:multi-transactional action="ALWAYS_BEGIN" doc:name="Transactional">
            <mongo:json-to-dbobject doc:name="Mongo DB"/>
            <mongo:insert-object config-ref="OrderMngt" collection="orderSummary" doc:name="Mongo DB"/>
            <set-session-variable variableName="orderSummaryStatus" value="success" doc:name="set Status"/>
            <catch-exception-strategy doc:name="Catch Exception Strategy">
                <set-session-variable variableName="orderSummaryStatus" value="failure" doc:name="set Status"/>
            </catch-exception-strategy>
        </ee:multi-transactional>
    </sub-flow>
    <sub-flow name="insertOrderItems">
        <dw:transform-message doc:name="prepare orderDetails json" metadata:id="fd41c69a-955b-4e31-9618-b6b00089e038">
            <dw:input-session-variable mimeType="application/java" variableName="orderId"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	orderItems: sessionVars.orderItems
}]]></dw:set-payload>
        </dw:transform-message>
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
        <foreach collection="#[payload.orderItems]" doc:name="loop over order details">
            <json:object-to-json-transformer mimeType="application/json" doc:name="Object to JSON"/>
            <choice doc:name="check for itemLoyalpoints">
                <when expression="#[validator.isNull(payload.itemLoyalpoints)]">
                    <dw:transform-message doc:name="set LoyalPoints as 0" metadata:id="44aa69e2-180e-430e-bafb-c011ebb6da48">
                        <dw:input-payload mimeType="application/json"/>
                        <dw:input-session-variable mimeType="application/java" variableName="orderId"/>
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	orderId: sessionVars.orderId,
	itemName: payload.itemName,
	itemQty: payload.itemQty as :number,
	itemPrice: payload.itemPrice as :number,
	itemCategory: payload.itemCategory,
	itemLoyalpoints: 0 as :number,
	orderDay: sessionVars.orderSummary.createdDay,
	orderDate: sessionVars.orderSummary.createdDate
} ]]></dw:set-payload>
                    </dw:transform-message>
                </when>
                <otherwise>
                    <dw:transform-message doc:name="map loyalpoints fro payload">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	orderId: sessionVars.orderId,
	itemName: payload.itemName,
	itemQty: payload.itemQty as :number,
	itemPrice: payload.itemPrice as :number,
	itemCategory: payload.itemCategory,
	itemLoyalpoints: payload.itemLoyalpoints as :number,
	orderDay: sessionVars.orderSummary.createdDay,
	orderDate: sessionVars.orderSummary.createdDate
} ]]></dw:set-payload>
                    </dw:transform-message>
                </otherwise>
            </choice>
            <ee:multi-transactional action="ALWAYS_BEGIN" doc:name="Transactional">
                <mongo:json-to-dbobject doc:name="Mongo DB"/>
                <mongo:insert-object config-ref="OrderMngt" collection="orderDetails" doc:name="Mongo DB"/>
                <set-session-variable variableName="orderDetailStatus" value="success" doc:name="set Status"/>
                <catch-exception-strategy doc:name="Catch Exception Strategy">
                    <set-session-variable variableName="orderDetailStatus" value="failure" doc:name="set status"/>
                </catch-exception-strategy>
            </ee:multi-transactional>
        </foreach>
    </sub-flow>
    <flow name="updateConstantMenu">
        <http:listener config-ref="orderMngtListener" path="/updateConstantMenu" allowedMethods="POST" doc:name="updateConstantMenu"/>
        <object-to-string-transformer mimeType="application/json" doc:name="Object to String"/>
        <json:json-to-object-transformer doc:name="JSON to Object" returnClass="java.lang.Object"/>
        <foreach collection="#[payload.menuItems]" doc:name="For Each">
            <json:object-to-json-transformer mimeType="application/json" doc:name="Object to JSON"/>
            <mongo:json-to-dbobject doc:name="Mongo DB"/>
            <mongo:update-objects-using-query-map config-ref="OrderMngt" collection="constantMenu" element-ref="#[payload]" multi="false" doc:name="Mongo DB" upsert="true">
                <mongo:query-attributes>
                    <mongo:query-attribute key="name">#[payload.name]</mongo:query-attribute>
                </mongo:query-attributes>
            </mongo:update-objects-using-query-map>
        </foreach>
        <dw:transform-message doc:name="prepare response" metadata:id="05f5ecd5-9614-4ae3-814b-a70fc47e661c">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "success",
	statusMessage: "Records Updated Successfully !!"
}]]></dw:set-payload>
        </dw:transform-message>
        <set-payload value="#[payload]" mimeType="application/json" doc:name="send response"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <flow-ref name="ExceptionHandling" doc:name="ExceptionHandling"/>
        </catch-exception-strategy>
    </flow>
    <flow name="getMenu">
        <http:listener config-ref="orderMngtListener" path="/getMenu" allowedMethods="GET" doc:name="/getMenu">
        </http:listener>
        <set-variable variableName="locationName" value="#[message.inboundProperties.'http.query.params'.locationName]" doc:name="extract locationName" metadata:id="2cb5a042-ff7f-4698-8c8f-0b6d40991cc4"/>
        <set-variable variableName="siteName" value="#[message.inboundProperties.'http.query.params'.siteName]" doc:name="extract siteName"/>
        <flow-ref name="calculateday" doc:name="calculateday"/>

        <choice doc:name="validate and invoke request">

            <when expression="#[validator.isNotNull(flowVars.locationName) &amp;&amp; validator.isNotNull(flowVars.siteName)]">
                <flow-ref name="getMenuForLocationSite" doc:name="getMenuForLocationSite"/>

            </when>
            <when expression="#[validator.isNotNull(flowVars.siteName) &amp;&amp; validator.isNull(flowVars.locationName)]">
                <flow-ref name="getMenuForSite" doc:name="getMenuForSite"/>

            </when>
            <otherwise>
                <dw:transform-message doc:name="prepare response" metadata:id="da40516b-06ca-429e-83a1-e7cdde3ece18">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "failure",
	statusMessage: "Please Select SiteName along with Location and try again !"
}]]></dw:set-payload>
                </dw:transform-message>

            </otherwise>
        </choice>
        <set-payload value="#[payload]" mimeType="application/json" doc:name="send response"/>

        <catch-exception-strategy doc:name="referring common exception handling">
            <flow-ref name="ExceptionHandling" doc:name="ExceptionHandling"/>
        </catch-exception-strategy>
    </flow>
    <flow name="getLocationSites">
        <http:listener config-ref="orderMngtListener" path="/getLocationSites" allowedMethods="GET" doc:name="/getLocationSites"/>
        <set-variable variableName="cityName" value="#[message.inboundProperties.'http.query.params'.cityName]" doc:name="extract CityName"/>
        <choice doc:name="validate city and retrieve sites">
            <when expression="#[validator.isNotNull(flowVars.cityName)]">
                <mongo:find-objects-using-query-map config-ref="OrderMngt" collection="locationSites" doc:name="getSites for City requested">
                    <mongo:query-attributes>
                        <mongo:query-attribute key="city">#[flowVars.cityName]</mongo:query-attribute>
                    </mongo:query-attributes>
                </mongo:find-objects-using-query-map>
                <mongo:mongo-collection-to-json mimeType="application/json" doc:name="transform collection to json"/>
            </when>
            <otherwise>
                <mongo:find-objects-using-query-map config-ref="OrderMngt" collection="locationSites" doc:name="getSites for Hyderabad (default)">
                    <mongo:query-attributes>
                        <mongo:query-attribute key="city">Hyderabad</mongo:query-attribute>
                    </mongo:query-attributes>
                </mongo:find-objects-using-query-map>
                <mongo:mongo-collection-to-json mimeType="application/json" doc:name="transform collection to json"/>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <flow-ref name="ExceptionHandling" doc:name="ExceptionHandling"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="getMenuForSite">
        <mongo:count-objects-using-query-map config-ref="OrderMngt" collection="menu" doc:name="check for siteData">
            <mongo:query-attributes>
                <mongo:query-attribute key="cateringSiteName">#[flowVars.siteName]</mongo:query-attribute>
                <mongo:query-attribute key="cateringDay">#[sessionVars.day]</mongo:query-attribute>
            </mongo:query-attributes>
        </mongo:count-objects-using-query-map>
        <choice doc:name="check results and process">
            <when expression="#[payload == 0]">
                <dw:transform-message doc:name="Transform Message" metadata:id="e7a90fba-e505-471d-8873-c2e59bae4e91">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "failure",
	statusMessage: "No Menu Available on this day for this Site. Please contact Admin !"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <mongo:find-one-object-using-query-map config-ref="OrderMngt" collection="menu" doc:name="find menu for siteName">
                    <mongo:query-attributes>
                        <mongo:query-attribute key="cateringSiteName">#[flowVars.siteName]</mongo:query-attribute>
                        <mongo:query-attribute key="cateringDay">#[sessionVars.day]</mongo:query-attribute>
                    </mongo:query-attributes>
                </mongo:find-one-object-using-query-map>
                <mongo:dbobject-to-json doc:name="transform dbObject to json"/>
                <set-variable variableName="siteResponse" value="#[payload]" mimeType="application/json" doc:name="Variable"/>
                <flow-ref name="getConstantMenu" doc:name="getConstantMenu"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="getMenuForLocationSite">
        <mongo:count-objects-using-query-map config-ref="OrderMngt" collection="menu" doc:name="check for location and site combination">
            <mongo:query-attributes>
                <mongo:query-attribute key="cateringLocation">#[flowVars.locationName]</mongo:query-attribute>
                <mongo:query-attribute key="cateringSiteName">#[flowVars.siteName]</mongo:query-attribute>
                <mongo:query-attribute key="cateringDay">#[sessionVars.day]</mongo:query-attribute>
            </mongo:query-attributes>
        </mongo:count-objects-using-query-map>
        <choice doc:name="check results and process">
            <when expression="#[payload == 0]">
                <dw:transform-message doc:name="prepare failure response" metadata:id="6025b1d3-b54d-427f-bb3e-ba339437798a">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "failure",
	statusMessage: "No Results found for Location and Site Combination !"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <mongo:find-one-object-using-query-map config-ref="OrderMngt" collection="menu" doc:name="find Objects based on Location and Site">
                    <mongo:query-attributes>
                        <mongo:query-attribute key="cateringLocation">#[flowVars.locationName]</mongo:query-attribute>
                        <mongo:query-attribute key="cateringSiteName">#[flowVars.siteName]</mongo:query-attribute>
                        <mongo:query-attribute key="cateringDay">#[sessionVars.day]</mongo:query-attribute>
                    </mongo:query-attributes>
                </mongo:find-one-object-using-query-map>
                <mongo:dbobject-to-json mimeType="application/json" doc:name="transform dbObject  to json"/>
                <set-variable variableName="siteResponse" value="#[payload]" doc:name="Variable"/>
                <flow-ref name="getConstantMenu" doc:name="getConstantMenu"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="getMenuForLocation">
        <mongo:count-objects-using-query-map config-ref="OrderMngt" collection="menu" doc:name="check for location">
            <mongo:query-attributes>
                <mongo:query-attribute key="cateringLocation">#[flowVars.locationName]</mongo:query-attribute>
                <mongo:query-attribute key="cateringDay">#[sessionVars.day]</mongo:query-attribute>
            </mongo:query-attributes>
        </mongo:count-objects-using-query-map>
        <choice doc:name="check results and process">
            <when expression="#[payload == 0]">
                <dw:transform-message doc:name="prepare failure response" metadata:id="bc974fd2-7363-427e-9e29-88c6a5326156">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "failure",
	statusMessage: "No Menu available on this day for this Location. Please contact Admin !"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <mongo:find-objects-using-query-map config-ref="OrderMngt" collection="menu" doc:name="find menu of location">
                    <mongo:query-attributes>
                        <mongo:query-attribute key="cateringDay">#[sessionVars.day]</mongo:query-attribute>
                        <mongo:query-attribute key="cateringLocation">#[flowVars.locationName]</mongo:query-attribute>
                    </mongo:query-attributes>
                </mongo:find-objects-using-query-map>
                <mongo:mongo-collection-to-json doc:name="transform dbObject to json"/>
                <set-variable variableName="siteResponse" value="#[payload]" mimeType="application/json" doc:name="Variable"/>
                <flow-ref name="getConstantMenu" doc:name="getConstantMenu"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="getConstantMenu">
        <mongo:find-objects-using-query-map config-ref="OrderMngt" collection="constantMenu" doc:name="Mongo DB"/>
        <mongo:mongo-collection-to-json doc:name="Mongo DB"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="2f9e3ec6-9ac4-4dcb-8fd0-6a6930a077f2">
            <dw:input-payload mimeType="application/json"/>
            <dw:input-variable mimeType="application/json" variableName="siteResponse"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"_id": flowVars.siteResponse."_id",
	cateringCity: flowVars.siteResponse.cateringCity,
	cateringLocation: flowVars.siteResponse.cateringLocation,
	cateringSiteName: flowVars.siteResponse.cateringSiteName,
	cateringDay: flowVars.siteResponse.cateringDay,
	menuItems: flowVars.siteResponse.menuItems map ((menuItems , indexOfItemsForDay) -> {
		name: menuItems.name,
		category: menuItems.category,
		price: menuItems.price,
		loyalPoints: menuItems.loyalPoints
	})
++ (payload map ((payload01 , indexOfPayload01) -> {
		name: payload01.name,
		category: payload01.category,
		price: payload01.price,
		loyalPoints: payload01.loyalPoints
	}))
}]]></dw:set-payload>
        </dw:transform-message>
    </sub-flow>
    <sub-flow name="ExceptionHandling">
        <dw:transform-message doc:name="set error response" metadata:id="0d853df5-7271-4014-9364-d4e9a266c9cc">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: "failure",
	statusMessage: "exception occurred while processing request !"
}]]></dw:set-payload>
        </dw:transform-message>
        <set-payload value="#[payload]" doc:name="send error response"/>
    </sub-flow>
    <sub-flow name="calculateday">
        <set-variable variableName="dayInWeek" value="#[server.dateTime.getDayOfWeek()]" doc:name="get day in week"/>
        <set-variable variableName="dateInMonth" value="#[server.dateTime.getDayOfMonth()]-#[server.dateTime.getMonth()]-#[server.dateTime.getYear()]" doc:name="get date in month"/>
        <expression-component doc:name="transform to day in string"><![CDATA[if (flowVars.dayInWeek ==1) 
	sessionVars.day = "Weekend";
else if (flowVars.dayInWeek ==2)
	sessionVars.day = "Monday";
else if (flowVars.dayInWeek ==3) 
	sessionVars.day = "Tuesday";
else if (flowVars.dayInWeek ==4)
	sessionVars.day = "Wednesday";
else if (flowVars.dayInWeek ==5) 
	sessionVars.day = "Thursday";
else if (flowVars.dayInWeek ==6)
	sessionVars.day = "Friday";
else if(flowVars.dayInWeek ==7)
	sessionVars.day = "Weekend";

if (flowVars.dateInMonth.equals("04-01-2019")||flowVars.dateInMonth.equals("19-04-2019")||flowVars.dateInMonth.equals("29-04-2019")||flowVars.dateInMonth.equals("29-05-2019")||flowVars.dateInMonth.equals("12-06-2019") ||flowVars.dateInMonth.equals("21-12-2018"))
	sessionVars.day="Specialday";
]]></expression-component>
    </sub-flow>
    <flow name="dumpData">
        <http:listener config-ref="orderMngtListener" path="/foodPlan" allowedMethods="GET" doc:name="/foodPlan"/>
        <mongo:find-objects-using-query-map config-ref="OrderMngt" collection="orders" doc:name="Mongo DB"/>
        <mongo:mongo-collection-to-json doc:name="Mongo DB"/>
        <json:json-to-object-transformer returnClass="java.lang.Object" doc:name="JSON to Object"/>
        <foreach collection="#[payload]" doc:name="For Each">
            <json:object-to-json-transformer mimeType="application/json" doc:name="Object to JSON"/>
            <http:request config-ref="LocalListener" path="/order" method="POST" doc:name="HTTP"/>
            <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        </foreach>

    </flow>

</mule>
